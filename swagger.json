{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample API.",
    "version": "1.0",
    "title": "Novelty Nodejs eCommerce API",
    "contact": {
      "email": "giftmbanda@gmail.com"
    }
  },

  "externalDocs": {
    "description": "Vist Gift Banda's website",
    "url": "http://giftmbanda.com"
  },

  "host": "novelty-v1.herokuapp.com",
  "basePath": "/v1",

  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],

  "schemes": ["https"],

  "paths": {
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid name/email/password/phone supplied"
          }
        }
      }
    },

    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Loggin user",
        "description": "",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "log in user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/_User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },

    "/user/data": {
      "get": {
        "tags": ["user"],
        "summary": "Check authentication",
        "description": "token provided upon being succefully logged in",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "auth-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid token provided"
          }
        }
      }
    },

    "/user/{userId}": {
      "patch": {
        "tags": ["user"],
        "summary": "Update user if exist",
        "description": "Update the details of user if it exists.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "userId that need to be updated",
            "type": "string"
          },
          {
            "in": "header",
            "name": "auth-token",
            "description": "token given to user upon a successful login"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "userId that needs to be deleted",
            "type": "string"
          },
          {
            "in": "header",
            "name": "auth-token",
            "description": "token given to user upon a successful login"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },

    "/admin": {
      "post": {
        "tags": ["admin"],
        "summary": "Create admin user",
        "description": "This can only be done by the logged in user.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created admin user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid name/email/password/phone supplied"
          }
        }
      }
    },

    "/admin/login": {
      "post": {
        "tags": ["admin"],
        "summary": "Loggin admin user",
        "description": "",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "log in admin user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/_User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },

    "/admin/data": {
      "get": {
        "tags": ["admin"],
        "summary": "Check authentication",
        "description": "token provided upon being succefully logged in",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "admin-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid token provided"
          }
        }
      }
    },

    "/admin/{userId}": {
      "patch": {
        "tags": ["admin"],
        "summary": "Update admin user if exist",
        "description": "Update the details of admin user if it exists.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "userId that need to be updated",
            "type": "string"
          },
          {
            "in": "header",
            "name": "admin-token",
            "description": "token given to user upon a successful login"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "delete": {
        "tags": ["admin"],
        "summary": "Delete admin user",
        "description": "This can only be done by the logged in user.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "userId that needs to be deleted",
            "type": "string"
          },
          {
            "in": "header",
            "name": "admin-token",
            "description": "token given to user upon a successful login"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },

    "/admin/user/{userId}": {
      "delete": {
        "tags": ["admin"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in admin user.",

        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "userId that needs to be deleted",
            "type": "string"
          },
          {
            "in": "header",
            "name": "admin-token",
            "description": "token given to user upon a successful login"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
  },

  "definitions": {
    "User": {
      "type": "object",
      "required": ["email"],

      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },

      "xml": {
        "name": "User"
      }
    },

    "_User": {
      "type": "object",
      "required": ["email", "password"],

      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },

      "xml": {
        "name": "_User"
      }
    },

    "Cart": {
      "type": "object",

      "properties": {
        "product": {
          "type": "mongoose.Schema.Types.ObjectId",
          "$ref": "#/definitions/Product",
          "required": "true"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "default": "1"
        }
      },

      "xml": {
        "name": "Cart"
      }
    },

    "Product": {
      "type": "object",

      "properties": {
        "name": {
          "type": "String",
          "required": "true"
        },
        "price": {
          "type": "Number",
          "required": "true"
        },
        "productImage": {
          "type": "String"
        },
        "category": {
          "type": "mongoose.Schema.Types.ObjectId",
          "$ref": "#/definitions/Category",
          "required": "true"
        }
      },

      "xml": {
        "name": "Product"
      }
    },

    "Category": {
      "type": "object",

      "properties": {
        "name": {
          "type": "String"
        }
      },

      "xml": {
        "name": "Cart"
      }
    }
  }
}
